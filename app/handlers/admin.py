from aiogram import Router, types, F
from aiogram.filters import Command
from config import ADMIN_IDS
import sqlite3
import random
import string

router = Router()

def is_admin(user_id):
    return user_id in ADMIN_IDS

def generate_code(length=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    text = (
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/newcode ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –∂–∏–ª—å—Ü–æ–≤\n"
        "/codes ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤"
    )
    await message.answer(text)

@router.message(Command("newcode"))
async def new_code(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    code = generate_code()
    conn = sqlite3.connect("data.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO access_codes (code, used) VALUES (?, 0)", (code,))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ù–æ–≤—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{code}`", parse_mode="Markdown")

@router.message(Command("users"))
async def list_users(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    conn = sqlite3.connect("data.db")
    cur = conn.cursor()
    cur.execute("SELECT full_name, house_number, apartment, role FROM users")
    rows = cur.fetchall()
    conn.close()

    if not rows:
        return await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    text = "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for row in rows:
        name, house, apt, role = row
        text += f"{name} ‚Äî –î–æ–º {house}, –∫–≤. {apt} ({role})\n"
    
    await message.answer(text)

@router.message(Command("codes"))
async def list_codes(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    conn = sqlite3.connect("data.db")
    cur = conn.cursor()
    cur.execute("SELECT code, used FROM access_codes")
    codes = cur.fetchall()
    conn.close()

    if not codes:
        return await message.answer("–ù–µ—Ç –∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ.")

    text = "üîê –ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞:\n"
    for code, used in codes:
        status = "‚úÖ" if used else "‚ùå"
        text += f"{code} ‚Äî {status}\n"

    await message.answer(text)
